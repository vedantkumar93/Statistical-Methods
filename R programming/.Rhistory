?uniroot
time.attack <- c(0.49, 0.50, 0.11, 0.09, 0.05, 0.75, 0.34, 0.04, 0.26, 0.16)
# Input the data
time.attack <- c(0.49, 0.50, 0.11, 0.09, 0.05, 0.75, 0.34, 0.04, 0.26, 0.16)
# Function to numerically compute mean of exponential distribution
exp.mean <- function(lambda){
fun <- function(x){x*dexp(x, rate=lambda)}
result <- integrate(fun, lower=0, upper=Inf)
return(result$value)}
# Equation whose solution is MOME
mome.eqn <- function(lambda, dat=time.attack) {exp.mean(lambda)-mean(dat)}
# Solve this equation to get MOME
result <- uniroot(mome.eqn, lower=1, upper=5, dat=time.attack)
# > result
# $root
# [1] 3.584233
# $f.root
# [1] -2.579698e-07
# $iter
# [1] 7
# $estim.prec
# [1] 6.103516e-05
# >
# Already know that the answer should be:
# > 1/mean(time.attack)
# [1] 3.584229
# >
# Note: In this example, it is much easier to get MOME directly rather than numerically.
result <- integrate(fun, lower=0, upper=Inf)
# Input the data
time.attack <- c(0.49, 0.50, 0.11, 0.09, 0.05, 0.75, 0.34, 0.04, 0.26, 0.16)
# Function to numerically compute mean of exponential distribution
exp.mean <- function(lambda){
fun <- function(x){x*dexp(x, rate=lambda)}
result <- integrate(fun, lower=0, upper=Inf)
return(result$value)}
# Equation whose solution is MOME
mome.eqn <- function(lambda, dat=time.attack) {exp.mean(lambda)-mean(dat)}
# Solve this equation to get MOME
result <- uniroot(mome.eqn, lower=1, upper=5, dat=time.attack)
# > result
# $root
# [1] 3.584233
# $f.root
# [1] -2.579698e-07
# $iter
# [1] 7
# $estim.prec
# [1] 6.103516e-05
# >
# Already know that the answer should be:
# > 1/mean(time.attack)
# [1] 3.584229
# >
# Note: In this example, it is much easier to get MOME directly rather than numerically.
debugSource('C:/Users/vedant/Dropbox/utd/Stats/R programming/03old_mom_estimation.R')
debugSource('C:/Users/vedant/Dropbox/utd/Stats/R programming/03old_mom_estimation.R')
View(fun)
View(fun)
mome.eqn <- function(lambda, dat=time.attack) {exp.mean(lambda)-mean(dat)}
# Input the data
time.attack <- c(0.49, 0.50, 0.11, 0.09, 0.05, 0.75, 0.34, 0.04, 0.26, 0.16)
# Function to numerically compute mean of exponential distribution
exp.mean <- function(lambda){
fun <- function(x){x*dexp(x, rate=lambda)}
result <- integrate(fun, lower=0, upper=Inf)
return(result$value)}
# Equation whose solution is MOME
mome.eqn <- function(lambda, dat=time.attack) {exp.mean(lambda)-mean(dat)}
# Solve this equation to get MOME
result <- uniroot(mome.eqn, lower=1, upper=5, dat=time.attack)
# > result
# $root
# [1] 3.584233
# $f.root
# [1] -2.579698e-07
# $iter
# [1] 7
# $estim.prec
# [1] 6.103516e-05
# >
# Already know that the answer should be:
# > 1/mean(time.attack)
# [1] 3.584229
# >
# Note: In this example, it is much easier to get MOME directly rather than numerically.
debugSource('C:/Users/vedant/Dropbox/utd/Stats/R programming/03old_mom_estimation.R')
lambda
?integrate
integrate(dnorm, -1.96, 1.96)
?dexp
?runif
debugSource('C:/Users/vedant/Dropbox/utd/Stats/R programming/03old_mom_estimation.R')
replicate(1000, runif(1,0,1))
sample1 <- replicate(1000, runif(1,0,1))
max(sample1)
theta1 <- max(sample1)
theta2 <- mean(sample1)
theta2 <- theta2*2
theta1 - sample1
tmpList <- [10,20,5]
tmpList <- c(10,20,5)
tmpList ** 2
(tmpList -5)** 2
mean((tmpList -5)** 2)
mean((theta1-sample1)**2)
mean((theta2-sample1)**2)
ml.est <- optim(par=c(3, 0.1), fn=neg.loglik.fun, method = "L-BFGS-B",
lower=rep(0,2), hessian=TRUE, dat=cpu)
gamma.pdf <- function(x, shape=ml.est$par[1], rate=ml.est$par[2]) {
dgamma(x, shape=shape, rate=rate)
}
# We will continue working with the CPU data that we saw earlier
cpu <- c(70, 36, 43, 69, 82, 48, 34, 62, 35, 15, 59, 139, 46, 37, 42, 30, 55, 56, 36, 82, 38, 89, 54, 25, 35, 24, 22, 9, 56, 19)
# Negative of log-likelihood function assuming gamma parent distribution
neg.loglik.fun <- function(par, dat)
{
result <- sum(dgamma(dat, shape=par[1], rate=par[2], log=TRUE))
return(-result)
}
# Minimize -log (L), i.e., maximize log (L)
ml.est <- optim(par=c(3, 0.1), fn=neg.loglik.fun, method = "L-BFGS-B",
lower=rep(0,2), hessian=TRUE, dat=cpu)
# > ml.est
# $par
# [1] 3.63149628 0.07529459
# $value
# [1] 136.561
# $counts
# function gradient
# 20       20
# $convergence
# [1] 0
# $message
# [1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"
# $hessian
# [,1]       [,2]
# [1,]    9.501374  -398.4584
# [2,] -398.458449 19223.5065
# >
# MLE
# > ml.est$par
# [1] 3.63149628 0.07529459
# >
# their standard errors
# > sqrt(diag(solve(ml.est$hessian)))
# [1] 0.89720941 0.01994668
# >
# How well the fitted model represents the data?
# relative density histogram
hist(cpu, freq=FALSE, xlab="cpu time", ylab="density",
main="histogram vs fitted gamma distribution")
# superimpose the fitted density
gamma.pdf <- function(x, shape=ml.est$par[1], rate=ml.est$par[2]) {
dgamma(x, shape=shape, rate=rate)
}
curve(gamma.pdf, from=0, to=140, add=TRUE)
# We will continue working with the CPU data that we saw earlier
cpu <- c(70, 36, 43, 69, 82, 48, 34, 62, 35, 15, 59, 139, 46, 37, 42, 30, 55, 56, 36, 82, 38, 89, 54, 25, 35, 24, 22, 9, 56, 19)
# Negative of log-likelihood function assuming gamma parent distribution
neg.loglik.fun <- function(par, dat)
{
result <- sum(dgamma(dat, shape=par[1], rate=par[2], log=TRUE))
return(-result)
}
# Minimize -log (L), i.e., maximize log (L)
ml.est <- optim(par=c(3, 0.1), fn=neg.loglik.fun, method = "L-BFGS-B",
lower=rep(0,2), hessian=TRUE, dat=cpu)
# > ml.est
# $par
# [1] 3.63149628 0.07529459
# $value
# [1] 136.561
# $counts
# function gradient
# 20       20
# $convergence
# [1] 0
# $message
# [1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"
# $hessian
# [,1]       [,2]
# [1,]    9.501374  -398.4584
# [2,] -398.458449 19223.5065
# >
# MLE
# > ml.est$par
# [1] 3.63149628 0.07529459
# >
# their standard errors
# > sqrt(diag(solve(ml.est$hessian)))
# [1] 0.89720941 0.01994668
# >
# How well the fitted model represents the data?
# relative density histogram
hist(cpu, freq=FALSE, xlab="cpu time", ylab="density",
main="histogram vs fitted gamma distribution")
# superimpose the fitted density
gamma.pdf <- function(x, shape=ml.est$par[1], rate=ml.est$par[2]) {
dgamma(x, shape=shape, rate=rate)
}
curve(gamma.pdf, from=0, to=140, add=FALSE)
print('Hi'+' Zero')
print('Hi')
cpu
print('HI','hello')
print(c('HI','hello'))
n <- c(1,2,3,5,10,30)
theta <- c(1,5,50,100)
N <- 1000
for(each_theta in theta){
for(each_n in n){
sample_set <- replicate(N, runif(each_n, 0, each_theta))
theta1 <- max(sample_set)
theta2 <- 2 * mean(sample_set)
mse1 <- mean((theta1 - sample_set) ** 2)
mse2 <- mean((theta2 - sample_set) ** 2)
print(c(mse1,mse2))
}
}
n <- c(1,2,3,5,10,30)
theta <- c(1,5,50,100)
N <- 1000
for(each_theta in theta){
for(each_n in n){
sample_set <- replicate(N, runif(each_n, 0, each_theta))
theta1 <- max(sample_set)
theta2 <- 2 * mean(sample_set)
mse1 <- mean((theta1 - sample_set) ** 2)
mse2 <- mean((theta2 - sample_set) ** 2)
print(mse1-mse2)
}
}
n <- c(1,2,3,5,10,30)
theta <- c(1,5,50,100)
N <- 1000
for(each_theta in theta){
for(each_n in n){
sample_set <- replicate(N, runif(each_n, 0, each_theta))
theta1 <- max(sample_set)
theta2 <- 2 * mean(sample_set)
mse1 <- mean((theta1 - sample_set) ** 2)
mse2 <- mean((theta2 - sample_set) ** 2)
print(c(mse1,mse2,mse1-mse2))
}
}
pbinom(c(0.24, 0.22, 0.26, 0.34, 0.35, 0.32, 0.33, 0.29, 0.19, 0.36, 0.30, 0.15, 0.17, 0.28, 0.38, 0.40, 0.37,0.27), 18, 0.5)
x <- c(0.24, 0.22, 0.26, 0.34, 0.35, 0.32, 0.33, 0.29, 0.19, 0.36,
0.30, 0.15, 0.17, 0.28, 0.38, 0.40, 0.37,0.27)
n=sum(x != 0.2)
data <- read.csv('C:/Users/vedant/Dropbox/utd/Stats/Assignments/MP 5/bodytemp-heartrate.csv')
data <- split(data, data$gender)
male <- data$`1`
female <- data$`1`
boxplot(male$body_temperature, female$body_temperature,
main='Boxplot for Body Temperature', xlab='Gender',
ylab='Temperature', names = c('Male', 'Female'))
hist(male$body_temperature, main='Male Body Temperature', xlab='Temperature',
probability = TRUE)
lines(density(male$body_temperature, adjust = 2))
hist(female$body_temperature, main='Female Body Temperature', xlab='Temperature',
probability = TRUE)
lines(density(female$body_temperature, adjust=2))
par(mfrow=c(1,2))
hist(male$body_temperature, main='Male Body Temperature', xlab='Temperature',
probability = TRUE)
lines(density(male$body_temperature, adjust = 2))
hist(female$body_temperature, main='Female Body Temperature', xlab='Temperature',
probability = TRUE)
lines(density(female$body_temperature, adjust=2))
View(data)
View(data)
data <- read.csv('C:/Users/vedant/Dropbox/utd/Stats/Assignments/MP 5/bodytemp-heartrate.csv')
data <- split(data, data$gender)
male <- data$`1`
female <- data$`2`
boxplot(male$body_temperature, female$body_temperature,
main='Boxplot for Body Temperature', xlab='Gender',
ylab='Temperature', names = c('Male', 'Female'))
par(mfrow=c(1,2))
hist(male$body_temperature, main='Male Body Temperature', xlab='Temperature',
probability = TRUE)
lines(density(male$body_temperature, adjust = 2))
hist(female$body_temperature, main='Female Body Temperature', xlab='Temperature',
probability = TRUE)
lines(density(female$body_temperature, adjust=2))
summary(male$body_temperature)
summary(female$body_temperature)
par(mfrow=c(1,2))
hist(male$heart_rate, main='Male Heart Rate', xlab = 'Heart Rate', probability = TRUE)
curve(dnorm(x, mean=mean(male$heart_rate), sd=sd(male$heart_rate)), add = TRUE)
hist(female$heart_rate, main='Female Heart Rate', xlab='Heart Rate', probability = TRUE)
curve(dnorm(x, mean=mean(female$heart_rate), sd=sd(female$heart_rate)), add = TRUE)
data <- read.csv('C:/Users/vedant/Dropbox/utd/Stats/Assignments/MP 5/bodytemp-heartrate.csv')
plot(data$body_temperature, data$heart_rate, xlab='Temperature', ylab='Heart Rate',
main='Scatter plot of Heart Rate vs Temperature')
cor(data$body_temperature, data$heart_rate)
par(mfrow=c(1,2))
plot(male$body_temperature, male$heart_rate, xlab='Temperature', ylab='Heart Rate', main='Male')
abline(lm(male$heart_rate~male$body_temperature), col='blue')
lines(lowess(male$body_temperature, male$heart_rate), col='red')
plot(female$body_temperature, female$heart_rate, xlab='Temperature', ylab='Heart Rate', main='Female')
abline(lm(female$heart_rate~female$body_temperature), col='blue')
lines(lowess(female$body_temperature, female$heart_rate), col='red')
library(boot)
data <- read.csv('C:\\Users\\vedant\\Dropbox\\utd\\Stats\\Assignments\\MP 4\\gpa (1).csv')
library(boot)
data <- read.csv('C:\\Users\\vedant\\Dropbox\\utd\\Stats\\Assignments\\MP 4\\gpa (1).csv')
plot(data$gpa, data$act, xlab='GPA', ylab='Act', main='Scatter Plot')
n <- length(data$gpa)
statistic <- function(x, i=c(1:n)){
d <- x[i,]
return(cor(d$act,d$gpa))
}
stat.boot <- boot(data, statistic, R=999, sim='Ordinary')
quantile(stat.boot$t, c(0.025, 0.975))
boot.ci(stat.boot, type='perc', conf=0.95)
library(boot)
data <- read.csv('C:\\Users\\vedant\\Dropbox\\utd\\Stats\\Assignments\\MP 4\\gpa (1).csv')
plot(data$gpa, data$act, xlab='GPA', ylab='Act', main='Scatter Plot')
n <- length(data$gpa)
library(boot)
data <- read.csv('C:\\Users\\vedant\\Dropbox\\utd\\Stats\\Assignments\\MP 4\\gpa (1).csv')
plot(data$gpa, data$act, xlab='GPA', ylab='Act', main='Scatter Plot')
n <- length(data$gpa)
statistic <- function(x, i=c(1:n)){
d <- x[i,]
return(cor(d$act,d$gpa))
}
stat.boot <- boot(data, statistic, R=999, sim='Ordinary')
quantile(stat.boot$t, c(0.025, 0.975))
boot.ci(stat.boot, type='perc', conf=0.95)
stat.boot <- boot(data, statistic, R=999, sim='ordinary')
data <- read.csv('C:\\Users\\vedant\\Dropbox\\utd\\Stats\\Assignments\\MP 4\\VOLTAGE (1).csv')
location_0 <- split(data, data$location)$`0`$voltage
location_1 <- split(data, data$location)$`1`$voltage
par(mfrow=c(1,2))
plot(location_0, ylab='VOltage', ylim = c(7,11), main='Remote: Location 0')
plot(location_1, ylab='Voltage', ylim = c(7,11), main='Local: Location 1')
data <- read.csv('C:\\Users\\vedant\\Dropbox\\utd\\Stats\\Assignments\\MP 4\\VOLTAGE (1).csv')
location_0 <- split(data, data$location)$`0`$voltage
location_1 <- split(data, data$location)$`1`$voltage
par(mfrow=c(1,2))
plot(location_0, ylab='VOltage', ylim = c(7,11), main='Remote: Location 0')
plot(location_1, ylab='Voltage', ylim = c(7,11), main='Local: Location 1')
mean(location_0)
mean(location_1)
sd(location_0)
sd(location_1)
quantile(location_0)
quantile(location_1)
x_bar <-mean(location_0)
y_bar <- mean(location_1)
sx <- sd(location_0)
sy <- sd(location_1)
n <- length(location_0)
m <- length(location_1)
sp <- sqrt((n-1)*sx*sx+(m-1)*sy*sy/(n+m-2))
alpha <- 1-0.95 # 95% CI
t <- qt(1-(alpha/2), df=(n+m-2))
(x_bar-y_bar) + c(-1,1)*t*sp*sqrt((1/n)+(1/m))
# CI
ml.est$par + c(-1,1)*se*qnorm(0.975)
n <- c(1,2,3,5,10,30)
theta <- c(1,5,50,100)
N <- 1000
for(each_theta in theta){
mse1 <- c()
mse2 <- c()
for(each_n in n){
sample_set <- replicate(N, runif(each_n, 0, each_theta))
theta1 <- max(sample_set)
theta2 <- 2*mean(sample_set)
mse1 <- append(mse1, mean((theta1 - sample_set) ** 2))
mse2 <- append(mse2, mean((theta2 - sample_set) ** 2))
}
plot(n, mse1, type='b', col='blue', ylab='MSE', main=c('Theta=', each_theta))
lines(n, mse2, type='b', col='red')
}
# Q2
x <- c(21.72, 14.65, 50.42, 28.78, 11.23)
likelihood <- function(par, dat){
n <- length(dat)
logl <- n*log(par) - (par+1)*sum(log(dat))
return (-logl)
}
ml.est <- optim(par = 1, fn=likelihood, method = 'BFGS', hessian = T, dat=x)
ml.est$par
se <- (1/ml.est$hessian)^0.5
# CI
ml.est$par + c(-1,1)*se*qnorm(0.975)
roadrace <- read.csv('roadrace.csv')
residenceCount <- roadrace %>% group_by(Maine) %>% tally
barplot(residenceCount$n, main='Bar Graph of Maine Residence', xlab='Residence', names.arg = residenceCount$Maine)
roadrace <- read.csv('C:\\Users\\vedant\\Dropbox\\utd\\Stats\\Assignments\\MP 2\\roadrace.csv')
residenceCount <- roadrace %>% group_by(Maine) %>% tally
barplot(residenceCount$n, main='Bar Graph of Maine Residence', xlab='Residence', names.arg = residenceCount$Maine)
residenceCount <- roadrace%>%group_by(Maine)%>%tally
residenceCount <- roadrace %>% group_by(Maine) %>% tally
install.packages("dplyr")
library(dplyr)
roadrace <- read.csv('C:\\Users\\vedant\\Dropbox\\utd\\Stats\\Assignments\\MP 2\\roadrace.csv')
roadrace <- read.csv('C:\\Users\\vedant\\Dropbox\\utd\\Stats\\Assignments\\MP 2\\roadrace.csv')
residenceCount <- roadrace %>% group_by(Maine) %>% tally
barplot(residenceCount$n, main='Bar Graph of Maine Residence', xlab='Residence', names.arg = residenceCount$Maine)
roadrace <- read.csv('C:\\Users\\vedant\\Dropbox\\utd\\Stats\\Assignments\\MP 2\\roadrace.csv')
roadrace <- split(roadrace, roadrace$Maine)
roadrace <- read.csv('C:\\Users\\vedant\\Dropbox\\utd\\Stats\\Assignments\\MP 2\\roadrace.csv')
roadrace <- split(roadrace, roadrace$Maine)
par(mfrow=c(1,2))
hist(roadrace[[1]]$Time..minutes., main='Runners Time of Non Maine Residence', xlab='Runners Time(in minutes)', ylim=c(0,1600))
hist(roadrace[[2]]$Time..minutes., main='Runners Time of Maine Residence', xlab='Runners Time(in minutes)', ylim=c(0,1600))
roadrace <- read.csv('C:\\Users\\vedant\\Dropbox\\utd\\Stats\\Assignments\\MP 2\\roadrace.csv')
roadrace <- read.csv('C:\\Users\\vedant\\Dropbox\\utd\\Stats\\Assignments\\MP 2\\roadrace.csv')
roadrace <- split(roadrace, roadrace$Sex)
boxplot(as.numeric(roadrace[[2]]$Age), as.numeric(roadrace[[3]]$Age), main='Boxplotfor Age of Runners vs Sex', xlab='Sex', ylab='Age', names = c('F', 'M'))
